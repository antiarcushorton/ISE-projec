#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 18 12:23:46 2021
@author: marcus
"""

import json

# Read capital names and coordinates from json file
stadiums_json = json.load(open('ballparks.json'))


teams = []
coordinates = {}
for state in stadiums_json:
     team = stadiums_json[state]['mascot']
     teams.append(team)
     coordinates[team] = (float(stadiums_json[state]['lat']), float(stadiums_json[state]['long']))
     
import math
from itertools import combinations

#Distance matrix between stadiums

def distance(team1, team2):
    c1 = coordinates[team1]
    c2 = coordinates[team2]
    diff = (c1[0]-c2[0], c1[1]-c2[1])
    return math.sqrt(diff[0]*diff[0]+diff[1]*diff[1])

dist = {(c1, c2): distance(c1, c2) for c1, c2 in combinations(teams, 2)}

import gurobipy as gpy
from gurobipy import GRB

m = gpy.Model()

#vars: cities i and j
vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='x')

for i, j in vars.keys():
    vars[j, i] = vars[i, j]  #other way

#two edges ONLY for each ballpark
cons = m.addConstrs(vars.sum(t, '*') == 2 for t in teams)

def subtourremover(model, where):
    if where == GRB.Callback.MIPSOL:
        #edges in each solution
        vals = model.cbGetSolution(model._vars)
        selected = gpy.tuplelist((i, j) for i, j in model._vars.keys()
                             if vals[i, j] > 0.5)
        #find shortest route
        tour = subtour(selected)
        if len(tour) < len(teams):
            # add subtour elimination constr. for every pair of cities in subtour
            model.cbLazy(gpy.quicksum(model._vars[i, j] for i, j in combinations(tour, 2))
                         <= len(tour)-1)

#given edges, find the shortest subtour

def subtour(edges):
    unvisited = teams[:]
    cycle = teams[:]
    while unvisited: 
        currentcycle = []
        neighbors = unvisited
        while neighbors:
            current = neighbors[0]
            currentcycle.append(current)
            unvisited.remove(current)
            neighbors = [j for i, j in edges.select(current, '*')
                         if j in unvisited]
        if len(currentcycle) <= len(cycle):
            cycle = currentcycle # New shortest subtour
    return cycle

m._vars = vars
m.Params.lazyConstraints = 1
m.optimize(subtourremover)

vals = m.getAttr('x', vars)
selected = gpy.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)

tour = subtour(selected)
assert len(tour) == len(teams)
print(tour)

import folium

map = folium.Map(location=[40,-95], zoom_start = 4)

points = []
for city in tour:
  points.append(coordinates[city])
points.append(points[0])

folium.PolyLine(points).add_to(map)

map.save("map.html")
